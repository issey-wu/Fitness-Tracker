<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Fitness Tracker</title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <!-- Flatpickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/styles.css">
  <!-- jQuery (required by DataTables) -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- DataTables CSS & JS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
  <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>

  <style>
.navbar-brand { flex: 1; text-align: center; }
.btn { white-space: nowrap; }
.edit-cell, .edit-buttons { display: none; }

/* Multilevel dropdown styles */
.dropdown-submenu {
  position: relative;
}

.dropdown-submenu .dropdown-menu {
  top: 0;
  left: 100%;
  margin-top: -1px;
  border-radius: 0.25rem;
}

.dropdown-submenu .dropdown-item:hover {
  background-color: #f8f9fa;
}

/* Make submenus visible on hover for larger screens */
@media (min-width: 992px) {
  .dropdown-submenu:hover > .dropdown-menu {
    display: block;
  }
  
  .dropdown-item.dropdown-toggle::after {
    display: inline-block;
    margin-left: 0.5em;
    vertical-align: 0.2em;
    content: "";
    border-top: 0.3em solid transparent;
    border-right: 0;
    border-bottom: 0.3em solid transparent;
    border-left: 0.3em solid;
  }
}

/* If you want the DataTables table hidden (only for behind-the-scenes logic) */
#workoutsDataTable {
  display: none;
}
  </style>
</head>
<body class="bg-light">

<!-- Navbar Structure -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
  <div class="container-fluid d-flex align-items-center">
    <button class="navbar-toggler me-2" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" 
            aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <a class="navbar-brand" href="#">Fitness Tracker</a>
    <div class="collapse navbar-collapse" id="navbarNavDropdown">
      <ul class="navbar-nav ms-auto">

        <!-- Filter Dropdown (White Text) -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle text-white" href="#" id="filterDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Filter
          </a>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="filterDropdown">
            
            <!-- Category Submenu -->
            <li class="dropdown-submenu">
              <a class="dropdown-item dropdown-toggle" href="#" role="button">
                Category
              </a>
              <ul class="dropdown-menu" id="filterCategoryMenu">
                <!-- Will be populated by JavaScript -->
              </ul>
            </li>

            <!-- Movement Submenu -->
            <li class="dropdown-submenu">
              <a class="dropdown-item dropdown-toggle" href="#" role="button">
                Movement
              </a>
              <ul class="dropdown-menu" id="filterMovementMenu">
                <!-- Will be populated by JavaScript -->
              </ul>
            </li>

            <!-- Muscle Focus Submenu -->
            <li class="dropdown-submenu">
              <a class="dropdown-item dropdown-toggle" href="#" role="button">
                Muscle Focus
              </a>
              <ul class="dropdown-menu" id="filterMuscleMenu">
                <!-- Will be populated by JavaScript -->
              </ul>
            </li>

          </ul>
        </li>

      </ul>
    </div>
  </div>
</nav>
  <!-- Main Container -->
  <div class="container-fluid mt-3">
    <!-- 1st Row: Date Picker & Buttons -->
    <div class="row">
      <div class="col-12 mb-1">
        <form id="showForm" action="/" method="GET">
          <div class="row g-2">
            <div class="col-4 col-sm-4">
              <input type="text" id="datePicker" name="date" class="form-control"
                     placeholder="YYYY-MM-DD" value="{{selectedDate}}">
            </div>
            <div class="col-4 col-sm-4">
              <button type="submit" class="btn btn-primary w-100">Show Workouts</button>
            </div>
            <div class="col-4 col-sm-4">
              <button type="button" class="btn btn-primary w-100"
                      style="background-color: #0056b3; border-color: #0056b3;"
                      data-bs-toggle="collapse" data-bs-target="#createWorkoutForm"
                      aria-expanded="false" aria-controls="createWorkoutForm">
                Create New Workout
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
    <!-- End 1st Row -->

    <!-- 2nd Row: Workouts Display -->
    <div class="row">
      <div class="col-12" id="workoutsContainer">
        {{#selectedDate}}
          <h4 class="mb-3">{{movements.0.category}} Workout for {{selectedDate}}</h4>
          <button id="toggleEditBtn" class="btn btn-secondary mb-3" onclick="toggleEditMode()">Edit</button>
          
          {{#movements}}
          <form action="/update-workout" method="POST">
            <input type="hidden" name="originalId" value="{{id}}">
            <input type="hidden" name="date" value="{{date}}">
            <div class="movement-block mb-4"
                 data-category="{{category}}"
                 data-movement="{{exercise}}"
                 data-muscle-focus="{{muscle_focus}}">
<!-- Editable category and exercise in edit mode -->
<div class="row mb-3 edit-cell">
  <div class="col-md-4">
    <label class="form-label">Category:</label>
    <select name="category" class="form-select form-select-sm" required>
      <option value="" disabled>Select Category</option>
      <!-- Will be populated by JavaScript in edit mode -->
    </select>
  </div>
  <div class="col-md-4">
    <label class="form-label">Movement:</label>
    <select name="exercise" class="form-select form-select-sm" required>
      <option value="" disabled>Select Movement</option>
      <!-- Will be populated by JavaScript in edit mode -->
    </select>
  </div>
  <div class="col-md-4">
    <label class="form-label">Muscle Focus:</label>
    <select name="muscle_focus" class="form-select form-select-sm" required>
      <option value="" disabled>Select Muscle Focus</option>
      <!-- Will be populated by JavaScript in edit mode -->
    </select>
  </div>
</div>

<!-- This is the view-mode heading -->
<h5 class="view-cell">{{exercise}} ({{muscle_focus}})</h5>
              <div class="table-responsive">
                <table class="table table-bordered align-middle mb-0 view-table">
                  <thead class="table-light">
                    <tr>
                      <th>Set</th>
                      <th>Reps</th>
                      <th>Weight (lbs)</th>
                      <th>Time (sec)</th>
                    </tr>
                  </thead>
                  <tbody>
                    {{#setRows}}
                    <tr class="set-row">
                      <td class="set-cell text-center">Set {{setNumber}}</td>
                      <td>
                        <span class="view-cell">{{reps}}</span>
                        <span class="edit-cell">
                          <input type="number" name="reps_{{setNumber}}" value="{{reps}}"
                                 class="form-control form-control-sm" min="0">
                        </span>
                      </td>
                      <td>
                        <span class="view-cell">{{weight}}</span>
                        <span class="edit-cell">
                          <input type="number" name="weight_{{setNumber}}" value="{{weight}}"
                                 class="form-control form-control-sm" min="0" step="0.5">
                        </span>
                      </td>
                      <td>
                        <span class="view-cell">{{duration}}</span>
                        <span class="edit-cell">
                          <input type="number" name="duration_{{setNumber}}" value="{{duration}}"
                                 class="form-control form-control-sm" min="0">
                        </span>
                      </td>
                    </tr>
                    {{/setRows}}
                    <!-- Notes row -->
                    <tr>
                      <td colspan="4">
                        <span class="view-cell text-center"><strong>Notes:</strong> {{notes}}</span>
                        <span class="edit-cell">
                          <div class="input-group">
                            <span class="input-group-text">Notes:</span>
                            <textarea name="notes" class="form-control" rows="3">{{notes}}</textarea>
                          </div>
                        </span>
                      </td>
                    </tr>
                  </tbody>
                </table>

                <div class="row mt-2 edit-cell">
                  <div class="col-auto">
                    <label class="form-label">Number of Sets:</label>
                    <div class="input-group" style="width: 150px;">
                      <input type="number" name="sets" value="{{setsCount}}"
                             class="form-control form-control-sm text-center" min="1">
                    </div>
                  </div>
                </div>
                <div class="edit-buttons">
                  <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
                  <button type="button" class="btn btn-danger mt-2 ms-2"
                          data-workout-id="{{id}}" data-workout-date="{{date}}">
                    Delete
                  </button>
                </div>
              </div>
            </div>
          </form>
          {{/movements}}
        {{/selectedDate}}
        {{^selectedDate}}
          <p class="text-muted">No date selected. Please choose a date to view workouts.</p>
        {{/selectedDate}}
      </div>
    </div>
    <!-- End 2nd Row -->
  </div>
  <!-- End Main Container -->

  <!-- Create New Workout Form (Collapsible) -->
  <div class="container mt-4">
    <div class="collapse" id="createWorkoutForm">
      <div class="card card-body">
        <h5>Add a New Workout (One Movement)</h5>
        <form action="/add-workout" method="POST" class="row g-3">
          <div class="col-xl-3 col-lg-4 col-md-6">
            <label class="form-label">Date (YYYY-MM-DD)</label>
            <input type="text" id="newDatePicker" class="form-control" name="date" required>
          </div>
          <div class="col-xl-3 col-lg-4 col-md-6">
            <label class="form-label">Category</label>
            <div class="input-group">
              <select class="form-select" id="categorySelect" name="category" required>
                <option value="" selected disabled>Select Category</option>
                <option value="Back">Back</option>
                <option value="Chest">Chest</option>
                <option value="Arms">Arms</option>
                <option value="Shoulders">Shoulders</option>
                <option value="Legs">Legs</option>
              </select>
              <button class="btn btn-outline-secondary" type="button"
                      data-bs-toggle="modal" data-bs-target="#manageCategoryModal">
                <i class="bi bi-gear"></i>
              </button>
            </div>
          </div>
          <div class="col-xl-3 col-lg-4 col-md-6">
            <label class="form-label">Movement</label>
            <div class="input-group">
              <select class="form-select" id="movementSelect" name="exercise" required disabled>
                <option value="" selected disabled>Select Movement</option>
              </select>
              <button class="btn btn-outline-secondary" type="button"
                      data-bs-toggle="modal" data-bs-target="#manageMovementModal"
                      disabled id="manageMovementBtn">
                <i class="bi bi-gear"></i>
              </button>
            </div>
          </div>
          <div class="col-xl-3 col-lg-4 col-md-6">
            <label class="form-label">Muscle Focus</label>
            <div class="input-group">
              <select class="form-select" id="muscleFocusSelect" name="muscle_focus" required disabled>
                <option value="" selected disabled>Select Muscle Focus</option>
              </select>
              <button class="btn btn-outline-secondary" type="button"
                      data-bs-toggle="modal" data-bs-target="#manageMuscleFocusModal"
                      disabled id="manageMuscleFocusBtn">
                <i class="bi bi-gear"></i>
              </button>
            </div>
          </div>
          <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
            <label class="form-label"># of Sets</label>
            <input type="number" class="form-control" name="sets" min="1" required>
          </div>
          <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
            <label class="form-label">Reps</label>
            <input type="text" class="form-control" name="reps" placeholder="6,7,8" required>
          </div>
          <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
            <label class="form-label">Weight (lbs)</label>
            <input type="text" class="form-control" name="weight" placeholder="145,130,115">
          </div>
          <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
            <label class="form-label">Time (sec)</label>
            <input type="text" class="form-control" name="duration" placeholder="30,30,30">
          </div>
          <div class="col-xl-4 col-lg-6 col-md-8 col-12">
            <label class="form-label">Notes (applies to all sets)</label>
            <input type="text" class="form-control" name="notes">
          </div>
          <div class="col-12">
            <button type="submit" class="btn btn-success w-100">Save Workout</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title">Confirm Delete</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this movement? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Category Management Modal -->
  <div class="modal fade" id="manageCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Manage Categories</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Add New Category</label>
            <div class="input-group">
              <input type="text" class="form-control" id="newCategoryInput">
              <button class="btn btn-success" type="button" id="addCategoryBtn">Add</button>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Delete Category</label>
            <div class="input-group">
              <select class="form-select" id="deleteCategorySelect">
                <option value="" selected disabled>Select Category to Delete</option>
              </select>
              <button class="btn btn-danger" type="button" id="deleteCategoryBtn">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Movement Management Modal -->
  <div class="modal fade" id="manageMovementModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Manage Movements for <span id="currentCategoryText"></span></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Add New Movement</label>
            <div class="input-group">
              <input type="text" class="form-control" id="newMovementInput">
              <button class="btn btn-success" type="button" id="addMovementBtn">Add</button>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Delete Movement</label>
            <div class="input-group">
              <select class="form-select" id="deleteMovementSelect">
                <option value="" selected disabled>Select Movement to Delete</option>
              </select>
              <button class="btn btn-danger" type="button" id="deleteMovementBtn">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Muscle Focus Management Modal -->
  <div class="modal fade" id="manageMuscleFocusModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Manage Muscle Focus for <span id="currentMovementText"></span></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Add New Muscle Focus</label>
            <div class="input-group">
              <input type="text" class="form-control" id="newMuscleFocusInput">
              <button class="btn btn-success" type="button" id="addMuscleFocusBtn">Add</button>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Delete Muscle Focus</label>
            <div class="input-group">
              <select class="form-select" id="deleteMuscleFocusSelect">
                <option value="" selected disabled>Select Muscle Focus to Delete</option>
              </select>
              <button class="btn btn-danger" type="button" id="deleteMuscleFocusBtn">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap 5 JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Flatpickr JS -->
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

  <script>
    // Global edit mode toggle
    let editMode = false;
    let originalDOMState = null;
    const workoutsContainer = document.getElementById('workoutsContainer');
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
    let workoutIdToDelete = null, workoutDateToDelete = null;

    // Collect data from a workout form and submit it via hidden form
function handleFormSubmission(e) {
  e.preventDefault();
  const form = e.currentTarget;
  const originalId = form.querySelector('input[name="originalId"]').value;
  const date = form.querySelector('input[name="date"]').value;
  
  // Get the category, exercise, and muscle_focus values from the edit form
  const categorySelect = form.querySelector('select[name="category"]');
  const exerciseSelect = form.querySelector('select[name="exercise"]');
  const muscleFocusSelect = form.querySelector('select[name="muscle_focus"]');
  
  // Get selected values, ensuring we have proper values
  const category = categorySelect ? categorySelect.value : '';
  const exercise = exerciseSelect ? exerciseSelect.value : '';
  const muscle_focus = muscleFocusSelect ? muscleFocusSelect.value : '';
  
  console.log('Form submission values:', { category, exercise, muscle_focus });
  
  // Validate required fields
  if (!category || !exercise || !muscle_focus) {
    alert('Please select a category, movement, and muscle focus.');
    return;
  }
  
  const sets = form.querySelectorAll('.set-row').length;
  const notes = form.querySelector('textarea[name="notes"]').value;
  let repsArray = [], weightArray = [], durationArray = [];

  for (let i = 1; i <= sets; i++) {
    const repsInput = form.querySelector(`input[name="reps_${i}"]`);
    const weightInput = form.querySelector(`input[name="weight_${i}"]`);
    const durationInput = form.querySelector(`input[name="duration_${i}"]`);
    repsArray.push(repsInput ? repsInput.value : '');
    weightArray.push(weightInput ? weightInput.value : '');
    durationArray.push(durationInput ? durationInput.value : '');
  }

  const hiddenForm = document.createElement('form');
  hiddenForm.method = 'POST';
  hiddenForm.action = '/update-workout';
  hiddenForm.style.display = 'none';

  const formData = {
    originalId, 
    date, 
    category, 
    exercise, 
    muscle_focus,
    sets,
    reps: repsArray.join(','),
    weight: weightArray.join(','),
    duration: durationArray.join(','),
    notes
  };
  
  console.log('Submitting form with data:', formData);
  
  Object.entries(formData).forEach(([key, val]) => {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = key;
    input.value = val;
    hiddenForm.appendChild(input);
  });

  document.body.appendChild(hiddenForm);
  hiddenForm.submit();
}

    // Attach event listeners for forms inside workoutsContainer
    function setupUpdateWorkoutForms() {
      document.querySelectorAll('#workoutsContainer form').forEach(form => {
        form.addEventListener('submit', handleFormSubmission);
      });
    }

    // Attach delete button listeners
    function setupDeleteButtons() {
      document.querySelectorAll('[data-workout-id]').forEach(btn => {
        btn.addEventListener('click', () => {
          workoutIdToDelete = btn.getAttribute('data-workout-id');
          workoutDateToDelete = btn.getAttribute('data-workout-date');
          deleteModal.show();
        });
      });
      document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/delete-workout';
        const idField = document.createElement('input');
        idField.type = 'hidden';
        idField.name = 'originalId';
        idField.value = workoutIdToDelete;
        const dateField = document.createElement('input');
        dateField.type = 'hidden';
        dateField.name = 'date';
        dateField.value = workoutDateToDelete;
        form.appendChild(idField);
        form.appendChild(dateField);
        document.body.appendChild(form);
        form.submit();
        deleteModal.hide();
      });
    }

    // Adjust set rows dynamically
    function attachSetCounterListeners() {
      document.querySelectorAll('input[name="sets"]').forEach(input => {
        input.dataset.originalValue = input.value;
        input.addEventListener('input', function() {
          const newValue = parseInt(this.value, 10);
          const originalValue = parseInt(this.dataset.originalValue, 10);
          if (isNaN(newValue) || newValue < 1) {
            this.value = originalValue; 
            return;
          }
          const block = this.closest('.movement-block');
          const tbody = block.querySelector('tbody');
          const setRows = tbody.querySelectorAll('.set-row');
          const notesRow = tbody.querySelector('tr:last-child');

          if (newValue > originalValue) {
            // Add rows
            for (let i = originalValue + 1; i <= newValue; i++) {
              const newRow = document.createElement('tr');
              newRow.className = 'set-row';
              const setCell = document.createElement('td');
              setCell.className = 'set-cell text-center';
              setCell.textContent = `Set ${i}`;
              newRow.appendChild(setCell);

              // Copy structure from the first set row
              const firstCells = setRows[0].querySelectorAll('td:not(.set-cell)');
              firstCells.forEach((_, idx) => {
                const cell = document.createElement('td');
                const viewSpan = document.createElement('span');
                viewSpan.className = 'view-cell';
                viewSpan.textContent = '';
                cell.appendChild(viewSpan);
                
                const editSpan = document.createElement('span');
                editSpan.className = 'edit-cell';
                const input = document.createElement('input');
                input.type = 'number';
                input.className = 'form-control form-control-sm';
                input.min = '0';
                
                if (idx === 0) { // Reps
                  input.name = `reps_${i}`;
                  input.value = '';
                } 
                else if (idx === 1) { // Weight
                  input.name = `weight_${i}`;
                  input.value = '';
                  input.step = '0.5';
                } 
                else if (idx === 2) { // Duration
                  input.name = `duration_${i}`;
                  input.value = '';
                }
                
                editSpan.appendChild(input);
                cell.appendChild(editSpan);
                newRow.appendChild(cell);
              });
              tbody.insertBefore(newRow, notesRow);
            }
          } else if (newValue < originalValue) {
            // Remove rows from the end
            for (let i = originalValue; i > newValue; i--) {
              if (setRows.length >= i) setRows[i - 1].remove();
            }
          }
          this.dataset.originalValue = newValue;
          
          // Toggle visibility for view/edit cells
          const viewCells = block.querySelectorAll('.view-cell');
          const editCells = block.querySelectorAll('.edit-cell');
          if (editMode) {
            viewCells.forEach(c => c.style.display = 'none');
            editCells.forEach(c => c.style.display = 'table-cell');
          } else {
            viewCells.forEach(c => c.style.display = 'table-cell');
            editCells.forEach(c => c.style.display = 'none');
          }
        });
      });
    }

// Toggle edit mode
function toggleEditMode() {
  editMode = !editMode;
  if (editMode) {
    // Save original DOM state
    originalDOMState = workoutsContainer.innerHTML;
    document.querySelectorAll('.movement-block').forEach(block => {
      block.querySelectorAll('.view-cell').forEach(c => c.style.display = 'none');
      block.querySelectorAll('.edit-cell').forEach(c => c.style.display = 'table-cell');
      block.querySelectorAll('.edit-buttons').forEach(b => b.style.display = 'block');
    });
    workoutsContainer.classList.add('edit-mode');
    document.getElementById('toggleEditBtn').textContent = 'Exit Edit';
    
    // Populate dropdown menus with proper values
    setTimeout(populateEditFormDropdowns, 50);
    
    // Setup event listeners for set counters
    attachSetCounterListeners();
  } else {
    // Restore DOM if needed
    if (originalDOMState) {
      workoutsContainer.innerHTML = originalDOMState;
      setupDeleteButtons();
      setupUpdateWorkoutForms();
    }
    document.querySelectorAll('.movement-block').forEach(block => {
      block.querySelectorAll('.view-cell').forEach(c => c.style.display = 'table-cell');
      block.querySelectorAll('.edit-cell').forEach(c => c.style.display = 'none');
      block.querySelectorAll('.edit-buttons').forEach(b => b.style.display = 'none');
    });
    workoutsContainer.classList.remove('edit-mode');
    document.getElementById('toggleEditBtn').textContent = 'Edit';
  }
}
    // Single DOMContentLoaded for all logic
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize Flatpickr
      flatpickr("#datePicker", {
        dateFormat: "Y-m-d",
        defaultDate: "{{selectedDate}}" || null
      });
      flatpickr("#newDatePicker", { dateFormat: "Y-m-d" });

      // Store/restore URL on form submission
      const currentURL = window.location.href;
      document.querySelectorAll('#workoutsContainer form').forEach(f => {
        f.addEventListener('submit', () => {
          if (currentURL.includes('date=')) {
            localStorage.setItem('returnToURL', currentURL);
          }
        });
      });
      const returnURL = localStorage.getItem('returnToURL');
      if (returnURL && returnURL !== window.location.href) {
        window.history.replaceState({}, '', returnURL);
        localStorage.removeItem('returnToURL');
        location.reload();
      }

      // Initialize
      setupDeleteButtons();
      setupUpdateWorkoutForms();

      // Local storage defaults
      const defaultData = {
        Back: { movements: { "Lat Pullover": ["Lower Back","Mid Back","Upper Back"], "Single Arm Rows": ["Lower Back","Mid Back","Upper Back"], "Close-Grip Lat Pulldown": ["Lower Back","Mid Back","Upper Back"] }},
        Chest: { movements: { "Dips": ["Lower Chest","Mid Chest","Upper Chest"], "Cable Chest Flys": ["Lower Chest","Mid Chest","Upper Chest"], "Incline Bench Press": ["Lower Chest","Mid Chest","Upper Chest"] }},
        Arms: { movements: { "Hammer Curls": ["Bicep (Long Head)","Bicep (Short Head)","Tricep (All Three Heads)"], "Bicep Curls": ["Bicep (Long Head)","Bicep (Short Head)","Tricep (All Three Heads)"], "Tricep Pushdown": ["Bicep (Long Head)","Bicep (Short Head)","Tricep (All Three Heads)"] }},
        Shoulders: { movements: { "Shoulder Raises (Machine)": ["Side Delt","Front Delt","Rear Delt"], "Dumbell Shoulder Press": ["Side Delt","Front Delt","Rear Delt"], "Reverse Flies": ["Side Delt","Front Delt","Rear Delt"] }},
        Legs: { movements: { "Squats": ["Quads","Hamstrings","Glutes"], "Leg Press": ["Quads","Hamstrings","Glutes"], "Leg Extensions": ["Quads","Hamstrings","Glutes"] }}
      };
      if (!localStorage.getItem('workoutData')) {
        localStorage.setItem('workoutData', JSON.stringify(defaultData));
      }
      window.getData = () => JSON.parse(localStorage.getItem('workoutData'));
      const saveData = d => localStorage.setItem('workoutData', JSON.stringify(d));

      // Movement & MuscleFocus select chaining
      function updateMovementSelect() {
        const category = document.getElementById('categorySelect').value;
        const movementSelect = document.getElementById('movementSelect');
        const muscleFocusSelect = document.getElementById('muscleFocusSelect');
        const manageMovementBtn = document.getElementById('manageMovementBtn');
        muscleFocusSelect.disabled = true;
        document.getElementById('manageMuscleFocusBtn').disabled = true;
        movementSelect.innerHTML = '<option value="" selected disabled>Select Movement</option>';
        if (!category) {
          movementSelect.disabled = true; 
          manageMovementBtn.disabled = true;
          return;
        }
        movementSelect.disabled = false; 
        manageMovementBtn.disabled = false;
        const data = getData();
        const moves = Object.keys(data[category].movements);
        moves.forEach(m => {
          const opt = document.createElement('option');
          opt.value = m;
          opt.textContent = m;
          movementSelect.appendChild(opt);
        });
      }

      function updateMuscleFocusSelect() {
        const category = document.getElementById('categorySelect').value;
        const movement = document.getElementById('movementSelect').value;
        const muscleFocusSelect = document.getElementById('muscleFocusSelect');
        const manageMuscleFocusBtn = document.getElementById('manageMuscleFocusBtn');
        muscleFocusSelect.innerHTML = '<option value="" selected disabled>Select Muscle Focus</option>';
        if (!movement) {
          muscleFocusSelect.disabled = true;
          manageMuscleFocusBtn.disabled = true;
          return;
        }
        muscleFocusSelect.disabled = false;
        manageMuscleFocusBtn.disabled = false;
        const data = getData();
        data[category].movements[movement].forEach(f => {
          const opt = document.createElement('option');
          opt.value = f;
          opt.textContent = f;
          muscleFocusSelect.appendChild(opt);
        });
      }

      document.getElementById('categorySelect').addEventListener('change', function() {
        updateMovementSelect();
        document.getElementById('currentCategoryText').textContent = this.value;
      });
      document.getElementById('movementSelect').addEventListener('change', function() {
        updateMuscleFocusSelect();
        document.getElementById('currentMovementText').textContent = this.value;
      });

      // Sequential field enabling in Create Form
      const formFields = [
        document.getElementById('newDatePicker'),
        document.getElementById('categorySelect'),
        document.getElementById('movementSelect'),
        document.getElementById('muscleFocusSelect')
      ];
      const additionalFields = document.querySelectorAll('#createWorkoutForm input:not(#newDatePicker)');
      additionalFields.forEach(f => {
        if (!['category','exercise','muscle_focus'].includes(f.name)) formFields.push(f);
      });
      for (let i = 1; i < formFields.length; i++) {
        formFields[i].disabled = true;
      }
      for (let i = 0; i < formFields.length - 1; i++) {
        formFields[i].addEventListener('change', function() {
          if (this.value) {
            formFields[i + 1].disabled = false;
          } else {
            for (let j = i + 1; j < formFields.length; j++) {
              formFields[j].disabled = true;
              if (formFields[j].tagName === 'SELECT') {
                formFields[j].innerHTML = '<option value="" selected disabled>Select Option</option>';
              } else {
                formFields[j].value = '';
              }
            }
          }
        });
      }

      // Modal event setups for Category, Movement, MuscleFocus
      function updateDeleteCategorySelect() {
        const sel = document.getElementById('deleteCategorySelect');
        sel.innerHTML = '<option value="" selected disabled>Select Category to Delete</option>';
        Object.keys(getData()).forEach(cat => {
          const opt = document.createElement('option');
          opt.value = cat;
          opt.textContent = cat;
          sel.appendChild(opt);
        });
      }
      function updateDeleteMovementSelect() {
        const sel = document.getElementById('deleteMovementSelect');
        sel.innerHTML = '<option value="" selected disabled>Select Movement to Delete</option>';
        const cat = document.getElementById('categorySelect').value;
        if (cat) {
          Object.keys(getData()[cat].movements).forEach(m => {
            const opt = document.createElement('option');
            opt.value = m;
            opt.textContent = m;
            sel.appendChild(opt);
          });
        }
      }
      function updateDeleteMuscleFocusSelect() {
        const sel = document.getElementById('deleteMuscleFocusSelect');
        sel.innerHTML = '<option value="" selected disabled>Select Muscle Focus to Delete</option>';
        const cat = document.getElementById('categorySelect').value;
        const mov = document.getElementById('movementSelect').value;
        if (cat && mov) {
          getData()[cat].movements[mov].forEach(f => {
            const opt = document.createElement('option');
            opt.value = f;
            opt.textContent = f;
            sel.appendChild(opt);
          });
        }
      }

      document.getElementById('manageCategoryModal').addEventListener('show.bs.modal', updateDeleteCategorySelect);
      document.getElementById('manageMovementModal').addEventListener('show.bs.modal', updateDeleteMovementSelect);
      document.getElementById('manageMuscleFocusModal').addEventListener('show.bs.modal', updateDeleteMuscleFocusSelect);

      // Add/delete for categories
      document.getElementById('addCategoryBtn').addEventListener('click', () => {
        const val = document.getElementById('newCategoryInput').value.trim();
        if (!val) return;
        const data = getData();
        if (!data[val]) {
          data[val] = { movements: {} };
          saveData(data);
          const catSel = document.getElementById('categorySelect');
          const opt = document.createElement('option');
          opt.value = val;
          opt.textContent = val;
          catSel.appendChild(opt);
          updateDeleteCategorySelect();
          document.getElementById('newCategoryInput').value = '';
        } else {
          alert('Category already exists!');
        }
      });
      document.getElementById('deleteCategoryBtn').addEventListener('click', () => {
        const delVal = document.getElementById('deleteCategorySelect').value;
        if (delVal && confirm(`Delete category "${delVal}"?`)) {
          const data = getData();
          delete data[delVal];
          saveData(data);
          const catSel = document.getElementById('categorySelect');
          [...catSel.options].forEach((opt, i) => {
            if (opt.value === delVal) catSel.remove(i);
          });
          updateDeleteCategorySelect();
          if (catSel.value === delVal) {
            catSel.value = '';
            updateMovementSelect();
          }
        }
      });

      // Add/delete movements
      document.getElementById('addMovementBtn').addEventListener('click', () => {
        const cat = document.getElementById('categorySelect').value;
        const val = document.getElementById('newMovementInput').value.trim();
        if (cat && val) {
          const data = getData();
          if (!data[cat].movements[val]) {
            data[cat].movements[val] = [];
            saveData(data);
            const movSel = document.getElementById('movementSelect');
            const opt = document.createElement('option');
            opt.value = val;
            opt.textContent = val;
            movSel.appendChild(opt);
            updateDeleteMovementSelect();
            document.getElementById('newMovementInput').value = '';
          } else {
            alert('Movement already exists!');
          }
        }
      });
      document.getElementById('deleteMovementBtn').addEventListener('click', () => {
        const cat = document.getElementById('categorySelect').value;
        const delVal = document.getElementById('deleteMovementSelect').value;
        if (cat && delVal && confirm(`Delete movement "${delVal}"?`)) {
          const data = getData();
          delete data[cat].movements[delVal];
          saveData(data);
          const movSel = document.getElementById('movementSelect');
          [...movSel.options].forEach((opt, i) => {
            if (opt.value === delVal) movSel.remove(i);
          });
          updateDeleteMovementSelect();
          if (movSel.value === delVal) {
            movSel.value = '';
            updateMuscleFocusSelect();
          }
        }
      });

      // Add/delete muscle focus
      document.getElementById('addMuscleFocusBtn').addEventListener('click', () => {
        const cat = document.getElementById('categorySelect').value;
        const mov = document.getElementById('movementSelect').value;
        const val = document.getElementById('newMuscleFocusInput').value.trim();
        if (cat && mov && val) {
          const data = getData();
          if (!data[cat].movements[mov].includes(val)) {
            data[cat].movements[mov].push(val);
            saveData(data);
            const mfSel = document.getElementById('muscleFocusSelect');
            const opt = document.createElement('option');
            opt.value = val;
            opt.textContent = val;
            mfSel.appendChild(opt);
            updateDeleteMuscleFocusSelect();
            document.getElementById('newMuscleFocusInput').value = '';
          } else {
            alert('Muscle focus already exists!');
          }
        }
      });
      document.getElementById('deleteMuscleFocusBtn').addEventListener('click', () => {
        const cat = document.getElementById('categorySelect').value;
        const mov = document.getElementById('movementSelect').value;
        const delVal = document.getElementById('deleteMuscleFocusSelect').value;
        if (cat && mov && delVal && confirm(`Delete muscle focus "${delVal}"?`)) {
          const data = getData();
          const idx = data[cat].movements[mov].indexOf(delVal);
          if (idx !== -1) {
            data[cat].movements[mov].splice(idx, 1);
          }
          saveData(data);
          const mfSel = document.getElementById('muscleFocusSelect');
          [...mfSel.options].forEach((opt, i) => {
            if (opt.value === delVal) mfSel.remove(i);
          });
          updateDeleteMuscleFocusSelect();
        }
      });
    }); // End single DOMContentLoaded
  </script>
    <script src="/js/filterLogic.js"></script>
</body>
</html>